import java.nio.charset.Charset

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.gebish:markdown2book:1.0"
    }
}

def jvmEncoding = Charset.defaultCharset().name()
if (jvmEncoding != "UTF-8") {
    throw new IllegalStateException("Build environment must be UTF-8 (it is: $jvmEncoding) - add '-Dfile.encoding=UTF-8' to the GRADLE_OPTS environment variable ")
}

allprojects {
    version = "${appVersion}"
    group   = "${appGroup}"

    ext {
        isSnapshot = version.endsWith("SNAPSHOT")
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    tasks.withType(GroovyCompile) {
        configure(groovyOptions) {
            forkOptions.jvmArgs = ['-Xmx1024m']
        }
    }
}

def groovyModules = [
    ":module:remote-core", ":module:remote-transport-local", ":module:remote-transport-http"
]

def publishedModules = [
    ":module:remote-core", ":module:remote-transport-local", ":module:remote-transport-http"
]

def publishedGroovyModules = groovyModules.findAll { it in publishedModules }

subprojects {
    if (project.path in groovyModules) {
        apply plugin: "groovy"
        apply plugin: "codenarc"

        codenarc {
            configFile = rootProject.file("config/codenarc/codenarc.xml")
        }

        sourceCompatibility = "${sourceCompatibilityVersion}"
        targetCompatibility = "${targetCompatibilityVersion}"

        tasks.withType(Test) {
            useJUnitPlatform()
        }

        test {
            // Enable reflection, which is utilized during the remote execution
            jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
        }

        tasks.withType(GroovyCompile) {
            configure(groovyOptions) {
                forkOptions.jvmArgs = ['-Xmx1024m']
            }
        }
    }

    if (project.path in publishedModules) {
        apply plugin: 'maven-publish'

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        artifacts {
            archives javadocJar
            archives sourcesJar
        }
    }
}

project(':module:remote-using-lib') {
    apply plugin: "groovy"

    dependencies {
        implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
        implementation project(":module:remote-core")
    }
}

project(":doc:manual") {
    ext {
        src = file("src")
        output = file("build/manual")
    }

    tasks.register("compile") {
        new markdown2book.Generator(src, output, "UTF-8").generate()
    }

    tasks.register("copyGroovyDoc") {
        dependsOn publishedGroovyModules.collect { project(it) }*.groovydoc
        def groovyApi = new File(output, "groovy-api")
        if (!groovyApi.exists()) {
            assert groovyApi.mkdirs()
        }

        publishedGroovyModules.collect { module ->
            def baseName = module[module.lastIndexOf(":") + 1..module.size() - 1]
            copy {
                from project(module).groovydoc.destinationDir
                into new File(groovyApi, baseName)
            }
        }
    }

    tasks.register("assemble") {
        dependsOn  tasks.compile, tasks.copyGroovyDoc
    }
}

project(":doc:site") {
    ext {
        src = file("src")
        output = file("build/site")
        manualDir = file("$output/manual")
        thisManual = file("$manualDir/$project.version")
    }

    tasks.register("clean") {
        doLast {
            if (output.exists()) {
                assert output.deleteDir()
            }
        }
    }

    task includeManual(dependsOn: project(":doc:manual").assemble, type: Sync) {
        from project(":doc:manual").output
        into project.thisManual

        doLast {
            ant.symlink link: "${manualDir.path}/latest", resource: thisManual.path, overwrite: true
        }
    }

    task copySrc(type: Copy) {
        from src
        into output
    }

    task compile(dependsOn: [copySrc, includeManual]) {}
}

